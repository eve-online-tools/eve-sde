# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
    - name: Set Release version env variable
      run: |
        echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Inspect builder
      run: |
        echo "Name:      ${{ steps.buildx.outputs.name }}"
        echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
        echo "Status:    ${{ steps.buildx.outputs.status }}"
        echo "Flags:     ${{ steps.buildx.outputs.flags }}"
        echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
    - name: Build the Docker image
      run: docker buildx build --platform linux/amd64,linux/arm64/v8 --no-cache . --file Dockerfile --tag ghcr.io/eve-online-tools/eve-sde:${{ env.RELEASE_VERSION }} --push
    - name: Build the Database-Docker image
      run: docker buildx build --platform linux/amd64,linux/arm64/v8 --no-cache . --file Dockerfile-SDEDatabase --tag ghcr.io/eve-online-tools/eve-sde-mariadb:$(date +%Y%m%d) --push
    - name: 'Deploy'
      uses: 'glopezep/helm@v1.7.1'
      with:
        release: 'nginx'
        namespace: 'eve-dev'
        chart: 'src/main/helm/eve-sde'
        token: '${{ github.token }}'
        values: |
          name: foobar
#        value-files: >-
#        [
#          "values.yaml",
#          "values.production.yaml"
#        ]
      env:
        KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
